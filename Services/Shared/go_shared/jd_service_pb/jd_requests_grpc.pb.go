// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: jd_requests.proto

package JD_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JDService_NotifyServiceOnline_FullMethodName  = "/jd_service.JDService/NotifyServiceOnline"
	JDService_NotifyServiceOffline_FullMethodName = "/jd_service.JDService/NotifyServiceOffline"
	JDService_EmitPlatformEvent_FullMethodName    = "/jd_service.JDService/EmitPlatformEvent"
)

// JDServiceClient is the client API for JDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JDServiceClient interface {
	NotifyServiceOnline(ctx context.Context, in *ServiceOnlineNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyServiceOffline(ctx context.Context, in *ServiceOfflineNotification, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmitPlatformEvent(ctx context.Context, in *PlatformEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJDServiceClient(cc grpc.ClientConnInterface) JDServiceClient {
	return &jDServiceClient{cc}
}

func (c *jDServiceClient) NotifyServiceOnline(ctx context.Context, in *ServiceOnlineNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JDService_NotifyServiceOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jDServiceClient) NotifyServiceOffline(ctx context.Context, in *ServiceOfflineNotification, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JDService_NotifyServiceOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jDServiceClient) EmitPlatformEvent(ctx context.Context, in *PlatformEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JDService_EmitPlatformEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JDServiceServer is the server API for JDService service.
// All implementations must embed UnimplementedJDServiceServer
// for forward compatibility
type JDServiceServer interface {
	NotifyServiceOnline(context.Context, *ServiceOnlineNotification) (*emptypb.Empty, error)
	NotifyServiceOffline(context.Context, *ServiceOfflineNotification) (*emptypb.Empty, error)
	EmitPlatformEvent(context.Context, *PlatformEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedJDServiceServer()
}

// UnimplementedJDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJDServiceServer struct {
}

func (UnimplementedJDServiceServer) NotifyServiceOnline(context.Context, *ServiceOnlineNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyServiceOnline not implemented")
}
func (UnimplementedJDServiceServer) NotifyServiceOffline(context.Context, *ServiceOfflineNotification) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyServiceOffline not implemented")
}
func (UnimplementedJDServiceServer) EmitPlatformEvent(context.Context, *PlatformEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitPlatformEvent not implemented")
}
func (UnimplementedJDServiceServer) mustEmbedUnimplementedJDServiceServer() {}

// UnsafeJDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JDServiceServer will
// result in compilation errors.
type UnsafeJDServiceServer interface {
	mustEmbedUnimplementedJDServiceServer()
}

func RegisterJDServiceServer(s grpc.ServiceRegistrar, srv JDServiceServer) {
	s.RegisterService(&JDService_ServiceDesc, srv)
}

func _JDService_NotifyServiceOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceOnlineNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JDServiceServer).NotifyServiceOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JDService_NotifyServiceOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JDServiceServer).NotifyServiceOnline(ctx, req.(*ServiceOnlineNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _JDService_NotifyServiceOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceOfflineNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JDServiceServer).NotifyServiceOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JDService_NotifyServiceOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JDServiceServer).NotifyServiceOffline(ctx, req.(*ServiceOfflineNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _JDService_EmitPlatformEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JDServiceServer).EmitPlatformEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JDService_EmitPlatformEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JDServiceServer).EmitPlatformEvent(ctx, req.(*PlatformEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// JDService_ServiceDesc is the grpc.ServiceDesc for JDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jd_service.JDService",
	HandlerType: (*JDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyServiceOnline",
			Handler:    _JDService_NotifyServiceOnline_Handler,
		},
		{
			MethodName: "NotifyServiceOffline",
			Handler:    _JDService_NotifyServiceOffline_Handler,
		},
		{
			MethodName: "EmitPlatformEvent",
			Handler:    _JDService_EmitPlatformEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jd_requests.proto",
}
