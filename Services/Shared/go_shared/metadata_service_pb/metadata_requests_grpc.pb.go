// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: metadata_requests.proto

package metadata_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetadataService_CheckClusterPrivate_FullMethodName        = "/metadata_service.MetadataService/CheckClusterPrivate"
	MetadataService_CopyEntityTagsToEntityList_FullMethodName = "/metadata_service.MetadataService/CopyEntityTagsToEntityList"
	MetadataService_GetAllPrivateClusters_FullMethodName      = "/metadata_service.MetadataService/GetAllPrivateClusters"
	MetadataService_GetEntityTags_FullMethodName              = "/metadata_service.MetadataService/GetEntityTags"
	MetadataService_TagEntities_FullMethodName                = "/metadata_service.MetadataService/TagEntities"
	MetadataService_UntagEntities_FullMethodName              = "/metadata_service.MetadataService/UntagEntities"
	MetadataService_GetEntitiesWithTaggings_FullMethodName    = "/metadata_service.MetadataService/GetEntitiesWithTaggings"
	MetadataService_DeleteEntitiesTaggings_FullMethodName     = "/metadata_service.MetadataService/DeleteEntitiesTaggings"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	CheckClusterPrivate(ctx context.Context, in *IsClusterPrivate, opts ...grpc.CallOption) (*BooleanResponse, error)
	CopyEntityTagsToEntityList(ctx context.Context, in *CopyEntityTags, opts ...grpc.CallOption) (*BooleanResponse, error)
	GetAllPrivateClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPrivateClustersResponse, error)
	GetEntityTags(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*TagList, error)
	TagEntities(ctx context.Context, in *TaggableEntities, opts ...grpc.CallOption) (*BooleanResponse, error)
	UntagEntities(ctx context.Context, in *TaggableEntities, opts ...grpc.CallOption) (*BooleanResponse, error)
	GetEntitiesWithTaggings(ctx context.Context, in *TagList, opts ...grpc.CallOption) (*EntitiesByType, error)
	DeleteEntitiesTaggings(ctx context.Context, in *EntityList, opts ...grpc.CallOption) (*BooleanResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) CheckClusterPrivate(ctx context.Context, in *IsClusterPrivate, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_CheckClusterPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) CopyEntityTagsToEntityList(ctx context.Context, in *CopyEntityTags, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_CopyEntityTagsToEntityList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAllPrivateClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPrivateClustersResponse, error) {
	out := new(AllPrivateClustersResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetAllPrivateClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetEntityTags(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*TagList, error) {
	out := new(TagList)
	err := c.cc.Invoke(ctx, MetadataService_GetEntityTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) TagEntities(ctx context.Context, in *TaggableEntities, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_TagEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UntagEntities(ctx context.Context, in *TaggableEntities, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_UntagEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetEntitiesWithTaggings(ctx context.Context, in *TagList, opts ...grpc.CallOption) (*EntitiesByType, error) {
	out := new(EntitiesByType)
	err := c.cc.Invoke(ctx, MetadataService_GetEntitiesWithTaggings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteEntitiesTaggings(ctx context.Context, in *EntityList, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_DeleteEntitiesTaggings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	CheckClusterPrivate(context.Context, *IsClusterPrivate) (*BooleanResponse, error)
	CopyEntityTagsToEntityList(context.Context, *CopyEntityTags) (*BooleanResponse, error)
	GetAllPrivateClusters(context.Context, *emptypb.Empty) (*AllPrivateClustersResponse, error)
	GetEntityTags(context.Context, *Entity) (*TagList, error)
	TagEntities(context.Context, *TaggableEntities) (*BooleanResponse, error)
	UntagEntities(context.Context, *TaggableEntities) (*BooleanResponse, error)
	GetEntitiesWithTaggings(context.Context, *TagList) (*EntitiesByType, error)
	DeleteEntitiesTaggings(context.Context, *EntityList) (*BooleanResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) CheckClusterPrivate(context.Context, *IsClusterPrivate) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClusterPrivate not implemented")
}
func (UnimplementedMetadataServiceServer) CopyEntityTagsToEntityList(context.Context, *CopyEntityTags) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyEntityTagsToEntityList not implemented")
}
func (UnimplementedMetadataServiceServer) GetAllPrivateClusters(context.Context, *emptypb.Empty) (*AllPrivateClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPrivateClusters not implemented")
}
func (UnimplementedMetadataServiceServer) GetEntityTags(context.Context, *Entity) (*TagList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityTags not implemented")
}
func (UnimplementedMetadataServiceServer) TagEntities(context.Context, *TaggableEntities) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagEntities not implemented")
}
func (UnimplementedMetadataServiceServer) UntagEntities(context.Context, *TaggableEntities) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagEntities not implemented")
}
func (UnimplementedMetadataServiceServer) GetEntitiesWithTaggings(context.Context, *TagList) (*EntitiesByType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesWithTaggings not implemented")
}
func (UnimplementedMetadataServiceServer) DeleteEntitiesTaggings(context.Context, *EntityList) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitiesTaggings not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_CheckClusterPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClusterPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CheckClusterPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CheckClusterPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CheckClusterPrivate(ctx, req.(*IsClusterPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_CopyEntityTagsToEntityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyEntityTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CopyEntityTagsToEntityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CopyEntityTagsToEntityList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CopyEntityTagsToEntityList(ctx, req.(*CopyEntityTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAllPrivateClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetAllPrivateClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetAllPrivateClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetAllPrivateClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetEntityTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetEntityTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetEntityTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetEntityTags(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_TagEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggableEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).TagEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_TagEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).TagEntities(ctx, req.(*TaggableEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UntagEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaggableEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UntagEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_UntagEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UntagEntities(ctx, req.(*TaggableEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetEntitiesWithTaggings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetEntitiesWithTaggings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetEntitiesWithTaggings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetEntitiesWithTaggings(ctx, req.(*TagList))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteEntitiesTaggings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteEntitiesTaggings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_DeleteEntitiesTaggings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteEntitiesTaggings(ctx, req.(*EntityList))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata_service.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckClusterPrivate",
			Handler:    _MetadataService_CheckClusterPrivate_Handler,
		},
		{
			MethodName: "CopyEntityTagsToEntityList",
			Handler:    _MetadataService_CopyEntityTagsToEntityList_Handler,
		},
		{
			MethodName: "GetAllPrivateClusters",
			Handler:    _MetadataService_GetAllPrivateClusters_Handler,
		},
		{
			MethodName: "GetEntityTags",
			Handler:    _MetadataService_GetEntityTags_Handler,
		},
		{
			MethodName: "TagEntities",
			Handler:    _MetadataService_TagEntities_Handler,
		},
		{
			MethodName: "UntagEntities",
			Handler:    _MetadataService_UntagEntities_Handler,
		},
		{
			MethodName: "GetEntitiesWithTaggings",
			Handler:    _MetadataService_GetEntitiesWithTaggings_Handler,
		},
		{
			MethodName: "DeleteEntitiesTaggings",
			Handler:    _MetadataService_DeleteEntitiesTaggings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata_requests.proto",
}
