// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: metadata_requests.proto

package metadata_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetadataService_CheckClusterPrivate_FullMethodName   = "/metadata_service.MetadataService/CheckClusterPrivate"
	MetadataService_GetAllPrivateClusters_FullMethodName = "/metadata_service.MetadataService/GetAllPrivateClusters"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	CheckClusterPrivate(ctx context.Context, in *IsClusterPrivate, opts ...grpc.CallOption) (*BooleanResponse, error)
	GetAllPrivateClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPrivateClustersResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) CheckClusterPrivate(ctx context.Context, in *IsClusterPrivate, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, MetadataService_CheckClusterPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAllPrivateClusters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPrivateClustersResponse, error) {
	out := new(AllPrivateClustersResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetAllPrivateClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	CheckClusterPrivate(context.Context, *IsClusterPrivate) (*BooleanResponse, error)
	GetAllPrivateClusters(context.Context, *emptypb.Empty) (*AllPrivateClustersResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) CheckClusterPrivate(context.Context, *IsClusterPrivate) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClusterPrivate not implemented")
}
func (UnimplementedMetadataServiceServer) GetAllPrivateClusters(context.Context, *emptypb.Empty) (*AllPrivateClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPrivateClusters not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_CheckClusterPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClusterPrivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).CheckClusterPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_CheckClusterPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).CheckClusterPrivate(ctx, req.(*IsClusterPrivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAllPrivateClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetAllPrivateClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetAllPrivateClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetAllPrivateClusters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata_service.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckClusterPrivate",
			Handler:    _MetadataService_CheckClusterPrivate_Handler,
		},
		{
			MethodName: "GetAllPrivateClusters",
			Handler:    _MetadataService_GetAllPrivateClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata_requests.proto",
}
